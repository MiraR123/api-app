name: Deploy to Kubernetes with Helm and ArgoCD

on:
  push:
    branches:
      - main  # Trigger the pipeline when changes are pushed to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2  # This will pull the latest code from your repository

      # Step 2: Set up Docker (DockerHub login is stored in GitHub secrets)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build the Docker image and tag it
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/api-app:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/api-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/api-app:latest

      # Step 5: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/api-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/api-app:latest

      # Step 6: Set up Kubernetes with kubectl
      - name: Set up Kubernetes
        uses: actions/setup-kubectl@v2
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}  # Kubernetes config stored in GitHub secrets

      # Step 7: Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # Step 8: Install ArgoCD CLI
      - name: Install ArgoCD CLI
        run: |
          curl -sSL https://github.com/argoproj/argo-cd/releases/download/v2.5.5/argocd-linux-amd64 -o argocd
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      # Step 9: Log into ArgoCD server
      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

      # Step 10: Update the Helm chart values with the new Docker image tag
      - name: Update Helm chart values
        run: |
          sed -i "s|<your-docker-repo>/<your-app-name>:.*|${{ secrets.DOCKER_USERNAME }}/api-app:${{ github.sha }}|g" ./fastapi-chart/values.yaml

      # Step 11: Deploy using Helm chart
      - name: Deploy Helm Chart
        run: |
          helm upgrade --install api-app ./fastapi-chart --namespace api --create-namespace  # Adjust the chart path if needed

      # Step 12: Sync the ArgoCD application
      - name: Sync ArgoCD Application
        run: |
          argocd app sync api-app  # Replace 'api-app' with your actual app name in ArgoCD
          argocd app wait api-app --timeout 300  # Wait for the app to be deployed successfully
